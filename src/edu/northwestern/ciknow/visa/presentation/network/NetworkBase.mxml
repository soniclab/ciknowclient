<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  width="100%" height="100%" 
		  xmlns:parsley="http://www.spicefactory.org/parsley">
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.northwestern.ciknow.common.domain.SharedModel;
			import edu.northwestern.ciknow.common.events.EdgeEvent;
			import edu.northwestern.ciknow.common.util.EdgeUtil;
			import edu.northwestern.ciknow.common.util.GeneralUtil;
			import edu.northwestern.ciknow.common.util.NodeUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.logging.ILogger;
			
			import org.spicefactory.parsley.core.context.Context;
			
			public var logger:ILogger;
			
			[Bindable] 
			public var availableEdgeTypes:ArrayCollection;
			
			[MessageDispatcher]
			public var dispatcher:Function;
			
			[Inject][Bindable]
			public var sm:SharedModel;
			
			[Inject]
			public var nu:NodeUtil;
			
			[Inject]
			public var eu:EdgeUtil;
			
			[Inject]
			public var gu:GeneralUtil;
			
			[Inject]
			public var context:Context;
			
			public var selectNodeTypesMessage:String = "Please select node types.";
			public var selectEdgeTypesMessage:String = "Please select edge types.";
			
			[Init]
			public function init():void{
				if (logger == null) throw new Error("NetworkBase is abstract");
			}
			
			public function getEdgeTypesAmongNodeTypes():void{
				var nodeTypes:ArrayCollection = getNodeTypes();
				if (nodeTypes == null || nodeTypes.length == 0) {
					Alert.show(selectNodeTypesMessage);
					return;				
				}
				
				var event:EdgeEvent = new EdgeEvent(EdgeEvent.GET_EDGE_TYPES_AMONG_NODE_TYPES);
				event.data = new Object();
				event.data.nodeTypes = nodeTypes;
				event.data.source = logger.category;
				event.data.loginNodeId = sm.loginNode.nodeId.toString();
				dispatcher(event);
			}
			
			[MessageHandler(selector="gotEdgeTypesAmongNodeTypes")]
			public function edgeTypesHandler(e:EdgeEvent):void{
				if (e.data.source != undefined && e.data.source == logger.category){					
					availableEdgeTypes = e.data.availableEdgeTypes as ArrayCollection;
					availableEdgeTypes.sort = gu.getSort("label");
					availableEdgeTypes.refresh();				
				}
			}
			
			public function defineLimits():void{
				var p:NetworkLimitPopup = new NetworkLimitPopup();
				context.viewManager.addViewRoot(p);
				gu.showPopup(p, moduleFactory);
			}
			
			// validate user input
			public function validate():Boolean{
				throw new Error("Abstract method call");
			}
			
			// get selected node types, which is required for subsequent VisualizationSettings.mxml
			public function getNodeTypes():ArrayCollection{
				throw new Error("Abstract method call");
			}
			
			public function get analyticSettings():Object{
				throw new Error("Abstract method call");
			}
			
			public function get exportSettings():URLVariables{
				throw new Error("Abstract method call");
			}
			
			public function get url():String{
				throw new Error("Abstract method call");
			}
						
			public function set url(s:String):void{
				throw new Error("Abstract method call");
			}
		]]>
	</fx:Script>

</s:VGroup>
