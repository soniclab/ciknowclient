<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  width="100%" height="100%" styleName="headlessPanel" 
		  xmlns:parsley="http://www.spicefactory.org/parsley" 
		  xmlns:node="edu.northwestern.ciknow.administration.presentation.node.*">
	
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.northwestern.ciknow.administration.presentation.node.NodeCreatePopup;
			import edu.northwestern.ciknow.administration.presentation.node.NodePM;
			import edu.northwestern.ciknow.administration.presentation.node.NodesClearPopup;
			import edu.northwestern.ciknow.common.events.NodeEvent;
			import edu.northwestern.ciknow.common.util.GeneralUtil;
			import edu.northwestern.ciknow.common.util.IOUtil;
			import edu.northwestern.ciknow.common.util.LogUtil;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.logging.ILogger;
			
			import org.spicefactory.parsley.core.context.Context;
			
			import spark.components.Application;
			
			private static var logger:ILogger = LogUtil.getLog(Node);
			
			[MessageDispatcher]
			public var dispatcher:Function; 
			
			[Inject]
			public var iu:IOUtil;
			
			[Inject]
			public var context:Context;
			
  			[Inject][Bindable]
			public var pm:NodePM;  
			
			[Inject]
			public var gu:GeneralUtil;
			
			[Init]
			public function init():void{
				logger.debug("initializing...");
				msgBox.visible = false;
				msgBox.includeInLayout = false;
			}
			
			private function createNode():void{
				var p:NodeCreatePopup = new NodeCreatePopup();
				context.viewManager.addViewRoot(p);
				gu.showPopup(p, moduleFactory);
			}
			
			private function tryDeleteNode():void{
				if (pm.selectedNodes == null || pm.selectedNodes.length == 0) {
					Alert.show("please specify target nodes.");
					return;
				}
				Alert.show('Are you sure to delete selected nodes?', 'CONFIRMATION', Alert.YES|Alert.NO, this, deleteNodeHandler);				
			}
			
			private function deleteNodeHandler(event:CloseEvent):void{
				if (event.detail == Alert.NO) return;
				pm.deleteNode();						
			}
			
 			private function clearNodeData():void{		
				if (pm.selectedNodes == null || pm.selectedNodes.length == 0) {
					Alert.show("please specify target nodes.");
					return;
				}
				
				var p:NodesClearPopup = new NodesClearPopup();
				context.viewManager.addViewRoot(p);
				p.nodeIds = pm.getSelectedNodeIds();
				gu.showPopup(p, moduleFactory);
			}	
			
			 
		]]>
	</fx:Script>
	
	<mx:HBox id="msgBox" styleName="warn" 
			 height="20" width="325" verticalAlign="middle"
			 visible="{pm.selectedNode.dirty}" 
			 includeInLayout="{pm.selectedNode.dirty}">
		<mx:Label id="warningMessage" text="Selected node has been modified." />
	</mx:HBox>	
	
	<s:HGroup width="100%" height="100%">
		<s:VGroup height="100%" width="325">
			<node:NodeSearchPanel id="nodeSearchPanel" title="Search" enabled="{pm.selectedNode == null || !pm.selectedNode.dirty}"/>
			<node:NodeListPanel id="nodeListPanel" title="Results"/>
		</s:VGroup>
		<node:NodeDetailsPanel id="nodeDetailsPanel"
							   includeInLayout="{pm.selectedNode != null}" 
							   visible="{pm.selectedNode != null}"/>
	</s:HGroup>

	<s:controlBarContent>
		<s:HGroup verticalAlign="baseline">
			<s:Button id="resetBtn" label="Reset" click="pm.resetNode()"/>
			<s:Button id="saveBtn" label="Save" click="pm.updateNode()"/>
			
			<s:HGroup enabled="{pm.selectedNode == null || !pm.selectedNode.dirty}" verticalAlign="baseline">
				<s:Button id="newBtn" label="New" click="createNode()"/>
				<s:Button id="deleteBtn" label="Delete" click="tryDeleteNode()"/> 	
				<s:Button id="clearBtn" label="Clear Data" click="clearNodeData()"/>
				<s:Button id="exportBtn" label="Export" click="iu.downloadContacts('0')"/>
				<s:Button id="importBtn" label="Import" click="iu.uploadContacts(overwriteBtn.selected, 'normal')"/>
				<s:CheckBox id="overwriteBtn" label="Overwrite" toolTip="Overwrite existing nodes during import"/>
			</s:HGroup>
		</s:HGroup>
	</s:controlBarContent>
</s:Panel>
