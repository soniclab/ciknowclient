<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" 
		 xmlns:parsley="http://www.spicefactory.org/parsley">
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.northwestern.ciknow.common.domain.GroupDTO;
			import edu.northwestern.ciknow.common.domain.SharedModel;
			import edu.northwestern.ciknow.common.events.GroupEvent;
			import edu.northwestern.ciknow.common.util.Constants;
			import edu.northwestern.ciknow.common.util.GeneralUtil;
			import edu.northwestern.ciknow.common.util.GroupUtil;
			import edu.northwestern.ciknow.common.util.LogUtil;
			import edu.northwestern.ciknow.common.util.NodeUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.logging.ILogger;
			import mx.utils.StringUtil;
			
			import org.spicefactory.parsley.core.context.Context;
			
			private static const logger:ILogger = LogUtil.getLog(Group);
			
			[MessageDispatcher]
			public var dispatcher:Function;
			
			[Inject][Bindable]
			public var sm:SharedModel;
			
			[Inject]
			public var generalUtil:GeneralUtil;
			
			[Inject]
			public var gu:GroupUtil;
			
			[Inject]
			public var nu:NodeUtil;
			
			[Inject]
			public var context:Context;
			
			[Bindable] private var allGroups:ArrayCollection = new ArrayCollection();
			[Bindable] private var currentGroupNodes:ArrayCollection = new ArrayCollection();
			private var currentGroupNodeIdSet:Object = new Object(); // distinct nodeIds
			private var showPrivateGroups:Boolean = false;
			private var groupMap:Object = new Object();
			
			public var selectGroupMessage:String = "Please select a group first.";
			public var deleteGroupMessage:String = "Are you sure to delete selected group?";
			public var systemGroupMessage:String = "This is a system group which cannot be deleted.";
			public var showPrivateGroupLabel:String = "Show Private Groups";
			public var hidePrivateGroupLabel:String = "Hide Private Groups";
			[Bindable]public var currentGroupNodesColumnPrefix:String = "Nodes In Selected Group:";
			
			[Init]
			public function init():void{
				logger.info("init");
				initAllGroups();
				
				var group:GroupDTO = gu.getGroupByName(Constants.GROUP_ALL);
				availableGroupBox.selectedItem = group;
				selectAvailableGroup();
			}	
			
			private function initAllGroups():void{
				allGroups.removeAll();
				for each (var group:GroupDTO in sm.groups){
					if (!showPrivateGroups && group.isPrivate()) continue;
					allGroups.addItem(group);
				}
				allGroups.sort = generalUtil.getSort("name");
				allGroups.refresh();		
			}
			
			private function getNodeIdSet(nodes:ArrayCollection):Object{
				var nodeIdSet:Object = new Object();
				for each (var node:Object in nodes){
					var nodeId:String = String(node["node_id"]);
					nodeIdSet[nodeId] = "1";
				}
				return nodeIdSet;
			}
			
			/**************************** GROUP SELECTION *********************************/
			private function selectGroup(useCache:Boolean=true):void{
				var group:GroupDTO = groupDg.selectedItem as GroupDTO;
				if (group == null) {
					
				} else {															
					var groupId:String = group.groupId.toString();
					if (useCache && groupMap.hasOwnProperty(groupId)){
						currentGroupNodes = ArrayCollection(groupMap[groupId]);
						currentGroupNodeIdSet = getNodeIdSet(currentGroupNodes);
					} else {
						var e:GroupEvent = new GroupEvent(GroupEvent.GET_PLAIN_NODES_BY_GROUP_ID);
						e.data.groupId = groupId;
						dispatcher(e);
					}
				}
			}
			
			private function selectAvailableGroup(useCache:Boolean=true):void{				
				var group:GroupDTO = GroupDTO(availableGroupBox.selectedItem);
				if (group == null) {
					
				} else {										
					var groupId:String = group.groupId.toString();
					if (useCache && groupMap.hasOwnProperty(groupId)){
						availableNodeDg.dataProvider = ArrayCollection(groupMap[groupId]);
					} else {
						var e:GroupEvent = new GroupEvent(GroupEvent.GET_PLAIN_NODES_BY_GROUP_ID);
						e.data.groupId = groupId;
						dispatcher(e);
					}
				}
			}
			
			[MessageHandler(selector="GOT_PLAIN_NODES_BY_GROUP_ID")]
			public function groupNodesHandler(event:GroupEvent):void{
				var nodes:ArrayCollection = ArrayCollection(event.data.nodes);				
				var groupId:String = String(event.data.groupId);
				groupMap[groupId] = nodes;
				if (groupDg.selectedItem != null && String(groupDg.selectedItem.groupId) == groupId){
					currentGroupNodes = nodes;
					currentGroupNodeIdSet = getNodeIdSet(currentGroupNodes);
				}
				
				if (availableGroupBox.selectedItem != null && String(availableGroupBox.selectedItem.groupId) == groupId){
					availableNodeDg.dataProvider = nodes;
				}
			}
						
			private function togglePrivateGroups():void{
				showPrivateGroups = !showPrivateGroups;
				initAllGroups();
				if (showPrivateGroups) toggleBtn.label = hidePrivateGroupLabel;
				else toggleBtn.label = showPrivateGroupLabel;
			}
			
			/******************************* NODES SELECTION ****************************/
			private function addNodes():void{
				var selectedNodes:Vector.<Object> = availableNodeDg.selectedItems;
				if (selectedNodes == null || selectedNodes.length == 0) return;
				var currentGroup:GroupDTO = GroupDTO(groupDg.selectedItem);
				if (currentGroup == null) return;
				
				var newNodeIds:ArrayCollection = new ArrayCollection();
				for each (var node:Object in selectedNodes){
					var nodeId:String = String(node["node_id"]);
					if (currentGroupNodeIdSet.hasOwnProperty(nodeId)) continue;
					newNodeIds.addItem(nodeId);
					currentGroupNodes.addItem(node);
					currentGroupNodeIdSet[nodeId] = "1";
				} 	
				if (newNodeIds.length == 0) return;
				
				var e:GroupEvent = new GroupEvent(GroupEvent.ADD_NODE_TO_GROUP);
				e.data = new Object();
				e.data.groupId = currentGroup.groupId.toString();
				e.data.nodeIds = newNodeIds;
				dispatcher(e);		
			}
			
			private function removeNodes():void{
				var deleteNodes:Vector.<Object> = nodeDg.selectedItems;
				if (deleteNodes == null || deleteNodes.length == 0) return;
				var currentGroup:GroupDTO = GroupDTO(groupDg.selectedItem);
				if (currentGroup == null) return;
				
				var deleteNodeIds:ArrayCollection = new ArrayCollection();
				for each (var deleteNode:Object in deleteNodes){
					var nodeId:String = String(deleteNode["node_id"]);
					deleteNodeIds.addItem(nodeId);
					currentGroupNodes.removeItemAt(currentGroupNodes.getItemIndex(deleteNode));
					delete currentGroupNodeIdSet[nodeId];
				}	
				if (deleteNodeIds.length == 0) return;
				
				var e:GroupEvent = new GroupEvent(GroupEvent.REMOVE_NODE_FROM_GROUP);
				e.data = new Object();
				e.data.groupId = currentGroup.groupId.toString();
				e.data.nodeIds = deleteNodeIds;
				dispatcher(e);				
			}		
			
			/********************************** CRUD **********************/			
			private function createGroup():void{
				var p:GroupCreatePopup = new GroupCreatePopup();
				context.viewManager.addViewRoot(p);
				generalUtil.showPopup(p, moduleFactory);
			}
			
			[MessageHandler(selector="createGroupDone")]
			public function groupCreated(e:GroupEvent):void{
				initAllGroups();
				groupDg.selectedItem = GroupDTO(e.data);
				selectGroup();
				
				groupDg.validateNow(); // to be sure
				groupDg.ensureCellIsVisible(groupDg.selectedIndex);
			}
			
			private function updateGroup():void{
				var group:GroupDTO = groupDg.selectedItem as GroupDTO;
				if (group == null) {
					Alert.show(selectGroupMessage);
					return;
				}
				
				if (gu.isGroupNameFreezed(group.name)){
					Alert.show(systemGroupMessage);
					return;
				}
				
				var p:GroupUpdatePopup = new GroupUpdatePopup();
				p.group = group;
				context.viewManager.addViewRoot(p);
				generalUtil.showPopup(p, moduleFactory);
			}
			
			private function deleteGroup():void{
				var group:GroupDTO = groupDg.selectedItem as GroupDTO;
				if (group == null) {
					Alert.show(selectGroupMessage);
					return;
				}
				
				if (gu.isGroupNameFreezed(group.name)){
					Alert.show(systemGroupMessage);
					return;
				}
				
				Alert.show(deleteGroupMessage, "", Alert.YES|Alert.NO, this, deleteGroupHandler);				
			}
			
			private function deleteGroupHandler(event:CloseEvent):void{
				if (event.detail == Alert.NO) return;				
				var group:GroupDTO = groupDg.selectedItem as GroupDTO;				
				var e:GroupEvent = new GroupEvent(GroupEvent.DELETE_GROUP);
				e.data = group;
				dispatcher(e);
			}
			
			[MessageHandler(selector="deleteGroupDone")]
			public function groupDeleted(e:GroupEvent):void{
				initAllGroups();
				//groupDg.selectedItem = null;
				generalUtil.hide(hg);
			}
			
		]]>
	</fx:Script>
	<s:DataGrid id="groupDg" 
				selectionChange="selectGroup()" 
				dataProvider="{allGroups}" 
				editable="false" 
				width="300" height="100%">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn id="groupColumn" headerText="Groups" dataField="name" showDataTips="true" dataTipField="name"/>
			</s:ArrayList>			
		</s:columns>
	</s:DataGrid>
	
	<s:HGroup id="hg" 
			  visible="{groupDg.selectedItem != null}" 
			  includeInLayout="{groupDg.selectedItem != null}"
			  height="100%" width="100%">
		<s:DataGrid id="nodeDg" 
					dataProvider="{currentGroupNodes}" 
					selectionMode="multipleRows" 
					doubleClickEnabled="true" 
					doubleClick="removeNodes()" 
					height="100%" width="100%">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="{currentGroupNodesColumnPrefix} {currentGroupNodes.length}" dataField="label"/>	
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
		<s:VGroup height="100%" verticalAlign="middle">
			<s:Button label="&lt;" click="addNodes()" width="50"/>
			<s:Button label="&gt;" click="removeNodes()" width="50"/>		
		</s:VGroup>
		
		<s:VGroup height="100%" width="100%">
			<s:DropDownList id="availableGroupBox" 
							dataProvider="{sm.groups}"
							labelField="name" 
							change="selectAvailableGroup()" 
							width="100%"/>
			<s:DataGrid id="availableNodeDg" 
						selectionMode="multipleRows" 
						doubleClickEnabled="true" 
						doubleClick="addNodes()" 
						height="100%" width="100%">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn id="availableNodesColumn" headerText="Available Nodes" dataField="label"/>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>					
		</s:VGroup>
	</s:HGroup>

	<s:controlBarContent>
		<s:Button id="newBtn" label="New" click="createGroup()"/> 
		<s:Button id="changeGroupNameBtn" label="Change Group Name" click="updateGroup()"/> 				
		<s:Button id="deleteBtn" label="Delete" click="deleteGroup()"/>
		<s:Spacer width="10"/>
		<s:Button id="toggleBtn" label="Show Private Groups" click="togglePrivateGroups()"/> 
	</s:controlBarContent>
</s:Panel>
