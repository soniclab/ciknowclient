<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="100%" height="100%" 
			   creationComplete="init()" close="close()"
			   title="Invite Selected Contacts"
			   xmlns:parsley="http://www.spicefactory.org/parsley">
	<fx:Declarations>
		<parsley:Configure/>
		<mx:EmailValidator id="emailV" source="{fromTi}" property="text"/>	
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.northwestern.ciknow.common.domain.SharedModel;
			import edu.northwestern.ciknow.common.events.GeneralEvent;
			import edu.northwestern.ciknow.common.util.Constants;
			import edu.northwestern.ciknow.common.util.GeneralUtil;
			import edu.northwestern.ciknow.common.util.LogUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ValidationResultEvent;
			import mx.logging.ILogger;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			private static const logger:ILogger = LogUtil.getLog(InvitePopup);
			
			[MessageDispatcher]
			public var dispatcher:Function;
			
			[Bindable][Inject]
			public var sm:SharedModel;
			
			[Inject]
			public var gu:GeneralUtil;
			
			public var nodeIds:ArrayCollection = new ArrayCollection();
			
			[Bindable]private var finishedIds:ArrayCollection = new ArrayCollection();
			[Bindable]private var completedIds:ArrayCollection = new ArrayCollection();
			[Bindable]private var notcompletedIds:ArrayCollection = new ArrayCollection();
			[Bindable]private var notStartedIds:ArrayCollection = new ArrayCollection();
			
			public var subjectPrefix:String = "Invitation to";
			public var emptySubjectMessage:String = "Subject Can Not Be Empty";
			public var invalidEmailPrefix:String = "Invalid email address:";
			
			[Bindable] public var mailToDescription:String = "Emails will be sent to your selected users whose survey progress is:";
			
			[Bindable] public var finishedMessage:String = "Finished";
			[Bindable] public var completedMessage:String = "Started And Completed";
			[Bindable] public var notCompletedMessage:String = "Started But Not Completed";
			[Bindable] public var notStartedMessage:String = "Not Started";						
			
			public function init():void{		
				logger.info("init");
				
				subjectTi.text = subjectPrefix + " " + sm.currentSurvey.name;				
				var adminEmail:String = gu.getAttributeValue(sm.currentSurvey.attributes, Constants.SURVEY_ADMIN_EMAIL);
				fromTi.text = (adminEmail == null)?"":adminEmail;
				
				var e:GeneralEvent = new GeneralEvent(GeneralEvent.GET_USER_STATUS_MAP);
				e.data = new Object();
				e.data.nodeIds = nodeIds;
				dispatcher(e);
				
				PopUpManager.centerPopUp(this);
			}	
			
			[MessageHandler(selector="getUserStatusMapDone")]
			public function userStatusHandler(event:GeneralEvent):void{
				var result:Object = event.data;
				finishedIds = ArrayCollection(result[Constants.NODE_PROGRESS_FINISHED]);
				completedIds = ArrayCollection(result[Constants.NODE_PROGRESS_COMPLETED]);
				notcompletedIds = ArrayCollection(result[Constants.NODE_PROGRESS_NOT_COMPLETED]);
				notStartedIds = ArrayCollection(result[Constants.NODE_PROGRESS_NOT_STARTED]);	
				sendBtn.enabled = true;	
			}
			
			private function submit():void{
				var subject:String = StringUtil.trim(subjectTi.text);
				if (subject.length == 0){
					Alert.show(emptySubjectMessage);
					return;
				}
				
				var vre:ValidationResultEvent = emailV.validate();
				if (vre != null && vre.results != null && vre.results.length > 0){
					Alert.show(invalidEmailPrefix + " " + fromTi.text);
					return;
				}
				
				var ids:ArrayCollection = new ArrayCollection();				
				if (finishedBox.selected) ids.addAll(finishedIds);
				if (completedBox.selected) ids.addAll(completedIds);
				if (notcompletedBox.selected) ids.addAll(notcompletedIds);
				if (notStartedBox.selected) ids.addAll(notStartedIds);
				
				var e:GeneralEvent = new GeneralEvent(GeneralEvent.INVITE_USERS);
				var d:Object = new Object();
				d.nodeIds = ids;
				d.subject = subject;
				d.fromEmail = StringUtil.trim(fromTi.text);
				e.data = d;				
				dispatcher(e);
				
				close();
			}	
			
			private function close():void{
				PopUpManager.removePopUp(this);
			}
		]]>
	</fx:Script>
	
	<s:Form>
		<s:FormItem id="subjectItem" label="Subject">
			<s:TextInput id="subjectTi" width="400"/>
		</s:FormItem>
		<s:FormItem id="fromItem" label="From">
			<s:TextInput id="fromTi" width="400"/>
		</s:FormItem>
		<s:FormItem id="toItem" label="To">
			<s:VGroup width="400">
				<s:Label text="{mailToDescription}"/>					
				<s:CheckBox id="finishedBox" label="{finishedMessage} ({finishedIds.length})"/>
				<s:CheckBox id="completedBox" label="{completedMessage} ({completedIds.length})"/>
				<s:CheckBox id="notcompletedBox" label="{notCompletedMessage} ({notcompletedIds.length})"/>
				<s:CheckBox id="notStartedBox" label="{notStartedMessage} ({notStartedIds.length})"/>					
			</s:VGroup>
		</s:FormItem>				
	</s:Form>
	
	<s:controlBarContent>
		<s:Button id="sendBtn" label="Submit" click="submit()" enabled="false"/>
		<s:Button id="cancelBtn" label="Cancel" click="close()"/>			
	</s:controlBarContent>	
</s:TitleWindow>
