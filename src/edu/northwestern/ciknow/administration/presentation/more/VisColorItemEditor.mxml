<?xml version="1.0" encoding="utf-8"?>
<s:GridItemEditor xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s="library://ns.adobe.com/flex/spark" 
				  xmlns:mx="library://ns.adobe.com/flex/mx" 
				  width="100%" height="100%">
	<s:layout>
		<s:HorizontalLayout verticalAlign="baseline"/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			
			/**
			 * This is an itemEditor.
			 * But it still require an itemRenderer for initial display.
			 * The itemEditor is in effect only after user double click the cell.
			 * (Also remember to set DataGrid.editor=true)
			 * 
			 * Since my editor and renderer has the same appearance, and updating
			 * the cell value can be achieve in renderer as well, so I decided to 
			 * use itemRenderer only.
			 */
			
			public override function set value(v:Object):void{
				var hex:String = String(v);
				cpLabel.text = hex;
				cp.selectedColor = uint(hex);
			}
			
			public override function get value():Object{
				return cpLabel.text;
			}
			
			private function selectColor():void{				
				var hex:String = colorToHex(cp.selectedColor);		
				cpLabel.text = hex;
			}
			
			// this method is available in GeneralUtil.as
			// but I don't want to create new GeneralUtil instance, or 
			// add this editor into parsley context 
			private function colorToHex(color:uint):String{
				var hex:String = (color & 0x00FFFFFF).toString(16).toUpperCase();
				var sb:String = "0x";
				for (var i:int = 0; i < 6-hex.length; i++){
					sb += "0";
				}
				sb += hex;
				
				return sb;			
			}
		]]>
	</fx:Script>
	<mx:ColorPicker id="cp" width="100" change="selectColor()"/>
	<s:Label id="cpLabel"/>
</s:GridItemEditor>
