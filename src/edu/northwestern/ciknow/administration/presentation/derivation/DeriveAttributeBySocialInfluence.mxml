<?xml version="1.0" encoding="utf-8"?>
<derivation:DeriveBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:derivation="edu.northwestern.ciknow.administration.presentation.derivation.*" 
					   width="100%" height="100%"
					   title="Derive Attributes by Social Influence">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.northwestern.ciknow.common.domain.QuestionDTO;
			import edu.northwestern.ciknow.common.events.EdgeEvent;
			import edu.northwestern.ciknow.common.events.GeneralEvent;
			import edu.northwestern.ciknow.common.events.NodeEvent;
			import edu.northwestern.ciknow.common.util.Constants;
			import edu.northwestern.ciknow.common.util.LogUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.utils.StringUtil;		
						
			[Bindable] private var numericAttrs:ArrayCollection;
			[Bindable] private var socialDirections:ArrayCollection = new ArrayCollection(["Both", "Incoming", "Outgoing"]); // the order is very important, refer to KNeighborhoodFilter.java in JUNG
			[Bindable] private var availableEdgeTypes:ArrayCollection;
			
			private var attrValueMap:Object = new Object();
			
			public var requireShortNameMessage:String = "Please specify question short name.";
			public var duplicateShortNameMessage:String = "Question shortName is already exist.";
			public var requireFieldNameMessage:String = "Please specify field name.";
			public var requireNodeTypesMessage:String = "Please specify node types.";
			public var requireAttributeMessage:String = "Please select attribute first.";
			
			public override function init():void{
				logger = LogUtil.getLog(DeriveAttributeBySocialInfluence);
				super.init();
				this.derivationType = Constants.DERIVE_ATTRIBUTE_BY_SI;
			}
			
			public override function derive():void{
				var questionShortName:String = StringUtil.trim(questionShortNameTi.text);
				if (questionShortName == "") {
					Alert.show(requireShortNameMessage);
					return;
				}
				var q:QuestionDTO = qu.getQuestionByShortName(sm.questions, questionShortName);
				if (q != null){
					Alert.show(duplicateShortNameMessage);	
					return;
				}
				
				var fieldName:String = StringUtil.trim(fieldNameTi.text);
				if (fieldName == "") {
					Alert.show(requireFieldNameMessage);
					return;
				}
				
				var nds:Vector.<Object> = typeBox.selectedItems;
				if (nds == null || nds.length == 0) {
					Alert.show(requireNodeTypesMessage);
					return;
				}
				
				
				if (varSocialInfluence.selectedItem == null){
					Alert.show(requireAttributeMessage);
					return;
				}
				
				var e:NodeEvent = new NodeEvent(NodeEvent.DERIVE_BY_SOCIAL_INFLUENCE);
				
				var d:Object = new Object();
				d.questionShortName = questionShortName;
				d.fieldName = fieldName;
				d.nodeTypes = nu.getNodeTypes(nds);
				d.direction = String(socialDirection.selectedIndex);
				var edgeTypes:ArrayCollection = new ArrayCollection();
				if (networkBox.selectedItems != null){
					edgeTypes = eu.getEdgeTypes(networkBox.selectedItems);
				}
				d.edgeTypes = edgeTypes;				
				var varName:String = String(varSocialInfluence.selectedItem.name);
				d.varSocialInfluence = varName;
				d.varValues = attrValueMap[varName];
				d.job = job;				
				e.data = d;	
				
				dispatcher(e);			
			}

			private function getEdgeTypesByNodeTypes():void{
				if (typeBox.selectedItems == null || 
					typeBox.selectedItems.length == 0 || 
					socialDirection.selectedItem == null){
					Alert.show(requireNodeTypesMessage);
					return;
				}				
				var e:EdgeEvent = new EdgeEvent(EdgeEvent.GET_EDGE_TYPES_BY_NODE_TYPES);
				e.data = new Object();
				e.data.nodeTypes = nu.getNodeTypes(typeBox.selectedItems);
				e.data.direction = String(socialDirection.selectedIndex); // refer to KNeighborhoodFilter.java in JUNG
				e.data.source = logger.category;
				e.data.loginNodeId = sm.loginNode.nodeId.toString();
				
				dispatcher(e);
			}
			
			[MessageHandler(selector="gotEdgeTypesByNodeTypes")]
			public function updateAvailableEdgeTypes(e:EdgeEvent):void{
				if (e.data.source == logger.category){					
					availableEdgeTypes = e.data.availableEdgeTypes as ArrayCollection;
					availableEdgeTypes.sort = gu.getSort("label");
					availableEdgeTypes.refresh();
				}				
			}
			
			private function getNumericAttrs():void{
				if (typeBox.selectedItems == null || typeBox.selectedItems.length == 0){
					Alert.show(requireNodeTypesMessage);
					return;
				}
				var e:GeneralEvent = new GeneralEvent(GeneralEvent.GET_NUMERIC_ATTRIBUTES_FOR_SOCIAL_INFERENCE);
				e.data = new Object();
				e.data.nodeTypes = nu.getNodeTypes(typeBox.selectedItems);
				e.data.direction = String(socialDirection.selectedIndex);
				var edgeTypes:ArrayCollection = new ArrayCollection();
				if (networkBox.selectedItems != null){
					edgeTypes = eu.getEdgeTypes(networkBox.selectedItems);
				}
				e.data.edgeTypes = edgeTypes;
				e.data.loginNodeId = sm.loginNode.nodeId.toString();
				
				dispatcher(e);
			}	
			
			[MessageHandler(selector="gotNumericAttributes4SI")]
			public function numericAttributeHandler(event:GeneralEvent):void{
				numericAttrs = ArrayCollection(event.data);
				numericAttrs.sort = gu.getSort("label");
				numericAttrs.refresh();
			}
			
			private function showSocialInferenceAttributeDetails():void{
				if (varSocialInfluence.selectedItem == null) {
					Alert.show(requireAttributeMessage);
					return;
				}				
				
				var p:NodeAttributeDetailsPopup = new NodeAttributeDetailsPopup();
				p.attrName = String(varSocialInfluence.selectedItem.name);
				p.attrValueMap = attrValueMap;
				context.viewManager.addViewRoot(p);
				gu.showPopup(p, moduleFactory);
			}
		]]>
	</fx:Script>

	<s:Label text="{instruction}"/>
	
	<s:Form width="100%" height="100%">
		<s:FormItem id="shortNameItem" label="Question Short Name">
			<s:TextInput id="questionShortNameTi" width="500"/>
		</s:FormItem>
		<s:FormItem id="fieldNameItem" label="Field Name">
			<s:TextInput id="fieldNameTi" width="500"/>
		</s:FormItem>
		<s:FormItem id="nodeTypesItem" label="Type of Nodes" width="100%">
			<s:DataGrid id="typeBox" 
						 dataProvider="{sm.nodeTypeDescriptions}" 
						 width="500" requestedRowCount="7"
						 selectionMode="multipleRows">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="label" headerText=""/>
					</s:ArrayList>					
				</s:columns>						
			</s:DataGrid>
		</s:FormItem>
		<s:FormItem id="directionItem" label="Direction">
			<s:DropDownList id="socialDirection" dataProvider="{socialDirections}" selectedIndex="0"/>
		</s:FormItem>				
		<s:FormItem id="networksItem" label="Networks" width="100%">
			<s:Button id="getEdgeTypesBtn" label="Refresh" click="getEdgeTypesByNodeTypes()"/>
			<s:DataGrid id="networkBox" 
						 dataProvider="{availableEdgeTypes}" 
						 selectionMode="multipleRows" 
						 width="500" requestedRowCount="7">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="label" headerText=""/>
					</s:ArrayList>
				</s:columns>						
			</s:DataGrid>
		</s:FormItem>				
		<s:FormItem id="attributeItem" label="Attribute">
			<s:DropDownList id="varSocialInfluence" dataProvider="{numericAttrs}" width="500"/>
			<s:HGroup verticalAlign="baseline">				
				<s:Button id="getAttributesBtn" click="getNumericAttrs()" label="Refresh"/>	
				<s:Button id="detailsBtn" click="showSocialInferenceAttributeDetails()" label="Details"/>
			</s:HGroup>
		</s:FormItem>								
	</s:Form>
</derivation:DeriveBase>
