<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" 
		 title=""  creationComplete="init()"
		 xmlns:parsley="http://www.spicefactory.org/parsley">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.northwestern.ciknow.common.domain.JobDTO;
			import edu.northwestern.ciknow.common.domain.SharedModel;
			import edu.northwestern.ciknow.common.events.GeneralEvent;
			import edu.northwestern.ciknow.common.util.Constants;
			import edu.northwestern.ciknow.common.util.EdgeUtil;
			import edu.northwestern.ciknow.common.util.GeneralUtil;
			import edu.northwestern.ciknow.common.util.NodeUtil;
			import edu.northwestern.ciknow.common.util.QuestionUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.logging.ILogger;
			
			import org.spicefactory.parsley.core.context.Context;
			
			public var logger:ILogger;						
			
			[MessageDispatcher]
			public var dispatcher:Function;
			
			[Inject][Bindable]
			public var sm:SharedModel;
			
			[Inject]
			public var gu:GeneralUtil;
			
			[Inject]
			public var nu:NodeUtil;
			
			[Inject]
			public var eu:EdgeUtil;
			
			[Inject]
			public var qu:QuestionUtil;
			
			[Inject]
			public var context:Context;
			
			[Bindable]
			public var instruction:String = "TODO: [descriptions]";
			
			public var job:JobDTO = null;
			public var derivationType:String = null;
			
			public function init():void{
				logger.debug("init");
			}
			
			public function derive():void{
				throw new Error("Abstract method call");
			}
			
			private function configJobSettings():void{
 				var p:DerivationJobPopup = new DerivationJobPopup();
				p.derivationType = derivationType;
				p.job = job;
				context.viewManager.addViewRoot(p);
				gu.showPopup(p, moduleFactory);
			}
			
			[MessageHandler(selector="CONFIG_JOB_SETTINGS")]
			public function onJobConfigured(e:GeneralEvent):void{
				if (e.data.derivationType != derivationType) return;				
				job = JobDTO(e.data.job);
				logger.debug("job configured: " + job);
			}
		]]>
	</fx:Script>
	
	<s:controlBarContent>
		<s:Button id="configBtn" label="Job Settings" click="configJobSettings()"/>
		<s:Button id="deriveBtn" label="Derive" click="derive()"/>	
	</s:controlBarContent>

</s:Panel>
