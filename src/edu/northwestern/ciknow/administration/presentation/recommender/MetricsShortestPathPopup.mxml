<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="100%" height="100%"
			   creationComplete="init()" close="close()"
			   xmlns:parsley="http://www.spicefactory.org/parsley">
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.northwestern.ciknow.common.domain.SharedModel;
			import edu.northwestern.ciknow.common.events.GeneralEvent;
			import edu.northwestern.ciknow.common.events.RecommendationEvent;
			import edu.northwestern.ciknow.common.popup.TextDisplayPopup;
			import edu.northwestern.ciknow.common.util.Constants;
			import edu.northwestern.ciknow.common.util.EdgeUtil;
			import edu.northwestern.ciknow.common.util.GeneralUtil;
			import edu.northwestern.ciknow.common.util.LogUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import mx.managers.PopUpManager;
			
			private static var logger:ILogger = LogUtil.getLog(MetricsShortestPathPopup);
			
			[Bindable] 
			private var selectedEdges:ArrayCollection;
			private var newPair:XML = null;	
			private var p:TextDisplayPopup = null;
			
			[MessageDispatcher]
			public var dispatcher:Function;

			[Inject][Bindable]
			public var sm:SharedModel;
			
			[Inject]
			public var eu:EdgeUtil;
			
			[Inject]
			public var gu:GeneralUtil;
			
			public var source:String = "identification";
			public var pair:XML = null;	
			public var parentButton:mx.controls.Button = null;
			
			public var removeEdgeMessage:String = "Please select from selected edge types...";
			public var addEdgeMessage:String = "Please select from available edge types...";
			public var lastCalculateMessage:String = "Last calculation time: ";
			public var calculationTitle:String = "Shortest Path Metrics Computation";
			public var calculationMessage:String = "Calculating ...";
			
			private function init():void{	
				if (pair.@metric == null || pair.@metric == Constants.SP) newPair = new XML(pair.toXMLString());
				else {
					newPair = <pair/>;
					newPair.@row = pair.@row;
					newPair.@col = pair.@col;
				}
				
				logger.debug("get selected edge types");
				selectedEdges = new ArrayCollection();
				for each (var edge:XML in newPair.edge){
					var ed:Object = eu.getEdgeDescription(sm.edgeTypeDescriptions, edge.@type);
					selectedEdges.addItem(ed);
				}
				selectedEdges.sort = gu.getSort("label");
				selectedEdges.refresh();	
				
				logger.debug("last calc time");
				var t:String = newPair.@lastCalcTime;
				if (t != null && t != ""){
					calcLabel.text = lastCalculateMessage + " " + t;
				}	
				
				PopUpManager.centerPopUp(this);
			}
			
			private function getLabel(item:Object, column:GridColumn):String{
				var type:String = item.type;
				var label:String = item.label;
				if (type.indexOf("d.") == 0) return "derived::" + label;
				else return label;
			}
			
			
			/********************* add/remove edge types **************************/
			private function addEdgeTypes():void{
				var items:Vector.<Object> = availableEdgesBox.selectedItems;
				if (items == null || items.length == 0) {
					Alert.show(addEdgeMessage);
					return;
				}
				
				for each (var edge:Object in items){
					if (contain(selectedEdges, edge)) continue;
					
					selectedEdges.addItem(edge);
					var edgeXml:XML = <edge type={edge.type}/>;
					newPair.appendChild(edgeXml);
				}
				
				selectedEdges.refresh();
			}			
			
			private function contain(edges:ArrayCollection, edge:Object):Boolean{
				for each (var e:Object in edges){
					if (e.type == edge.type) {
						return true;
					}
				}	
				return false;
			}
			
			private function removeEdgeTypes():void{
				var items:Vector.<Object> = selectedEdgesBox.selectedItems;
				if (items == null || items.length == 0) {
					Alert.show(removeEdgeMessage);
					return;
				}
				
				for each (var edge:Object in items){
					selectedEdges.removeItemAt(selectedEdges.getItemIndex(edge));
					delete newPair.edge.(@type == edge.type)[0];
				}
				
				selectedEdges.refresh();
			}	
			
	
			/********************* controlbar operations **************************/
			private function save():void{
				if (!updateLocalConfig()) return;
				
				var event:RecommendationEvent = new RecommendationEvent(RecommendationEvent.UPDATE_REC_CONFIG);
				event.data.config = sm.recConfigXML.toXMLString();
				dispatcher(event);
				
				init();
			}
			
			private function updateLocalConfig():Boolean{
				pair.@metric = Constants.SP;
				pair.@dirty = "1";
				parentButton.label = pair.@metric;
				
				if (universalBox.selected){
					//for each (var p:XML in sm.recConfigXML[source].pair.(@metric== Constants.SP)){
					for each (var p:XML in sm.recConfigXML[source].pair){
						if (("@metric" in p) && (p.@metric == Constants.SP)){ 
							gu.removeXMLChildren(p);
							for each (var e:XML in newPair.edge){
								p.appendChild(e);
								p.@universal = "1";
							}
						}
					}
				} else {
					gu.removeXMLChildren(pair);
					for each (var edge:XML in newPair.edge){
						pair.appendChild(edge);
					}
					pair.@universal = "0";					
				}
				
				logger.debug("Updated pair: " + pair.toXMLString());
				return true;
			}
			
			private function close():void{
				PopUpManager.removePopUp(this);				
			}

			private function calculate():void{
				updateLocalConfig();
				
				var e:RecommendationEvent = new RecommendationEvent(RecommendationEvent.COMPUTE_RECOMMENDATIONS);
				e.data.source = source;
				e.data.row = String(pair.@row);
				e.data.col = String(pair.@col);	
				e.data.config = sm.recConfigXML.toXMLString();
				dispatcher(e);
				
				p = new TextDisplayPopup();
				gu.showPopup(p);
				p.title = calculationTitle;
				p.msg = calculationMessage;
				p.imagesource = sm.baseURL + "/images/calculate.jpg";
				p.showCloseButton(false);
			}
			
			[MessageHandler(selector="computedRecommendations")]
			public function computeHandler(event:RecommendationEvent):void{
				var d:Object = event.data;
				if (d.source == source && d.row == pair.@row && d.col == pair.@col) {				
					p.msg = String(event.data.msg);
					p.textColor = (event.data.success == "1")? 0x006400:0xff0000;
					p.showCloseButton(true);
					
					init();
				}
			}
		]]>
	</fx:Script>
	
	
	<s:DataGrid id="availableEdgesBox" 
				dataProvider="{sm.edgeTypeDescriptions}" 
				selectionMode="multipleRows" 
				requestedRowCount="8"
				doubleClickEnabled="true" 
				doubleClick="addEdgeTypes()">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn id="allEdgeTypesColumn" 
							  headerText="Available Edge Types" labelFunction="getLabel" 
							  showDataTips="true" dataTipField="type" width="300"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>	
	
	<s:VGroup height="100%" verticalAlign="middle">
		<s:Button label="&gt;" click="addEdgeTypes()"/>
		<s:Button label="&lt;" click="removeEdgeTypes()"/>
	</s:VGroup>
	
	<s:DataGrid id="selectedEdgesBox" dataProvider="{selectedEdges}" 
				 selectionMode="multipleRows"
				 requestedRowCount="8"
				 doubleClickEnabled="true" 
				 doubleClick="removeEdgeTypes()">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn id="selectedEdgeTypesColumn" 
							  headerText="Selected Edge Types" labelFunction="getLabel" 
							  showDataTips="true" dataTipField="type" width="300"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>	
	
	<s:controlBarContent>
		<s:HGroup verticalAlign="baseline">
			<s:CheckBox id="universalBox" label="Universal" toolTip="Apply this settings to all other pairs using shortest path."/>
			<s:Button id="saveBtn" label="Save" click="save()"/>
			<s:Button id="closeBtn" label="Close" click="close()"/>
			<s:Button id="calculateBtn" label="Calculate" click="calculate()"/>		
			<s:Label id="calcLabel" fontStyle="italic"/>
		</s:HGroup>
	</s:controlBarContent>
</s:TitleWindow>
