<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" 
		  xmlns:parsley="http://www.spicefactory.org/parsley">
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import edu.northwestern.ciknow.common.domain.NodeDTO;
			import edu.northwestern.ciknow.common.events.NodeEvent;
			import edu.northwestern.ciknow.common.util.GeneralUtil;
			import edu.northwestern.ciknow.common.util.LogUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.logging.ILogger;
			
			import spark.collections.Sort;

			private static var logger:ILogger = LogUtil.getLog(Attributes);
			
			[Bindable]
			[Inject]
			public var pm:NodePM;
			
			[Bindable] private var pairs:ArrayCollection;

			[Inject]
			public var gu:GeneralUtil;
			
			[Init]
			public function init():void{
				logger.info("init attributes");
				updateUI();
			}
			
			[MessageHandler(selector="loadedCurrentNode")]
			public function onNodeLoaded(event:NodeEvent):void{
				updateUI();
			}
			
			private function updateUI():void{
				if (pm.selectedNode == null) {
					logger.debug("selectedNode=null");
					return;
				}
				
				pairs = new ArrayCollection();
				for (var key:String in pm.selectedNode.attributes){
					var pair:Object = new Object();
					pair.key = key;
					pair.value = pm.selectedNode.attributes[key];
					pairs.addItem(pair);
				}			
				
				var sort:Sort = gu.getSort("key");
				pairs.sort = sort;
				pairs.refresh();
			}
			
			private function selectAttr():void{
				var pair:Object = dg.selectedItem;
				keyTi.text = pair.key;
				valueTi.text = pair.value;
			}
			
			private function createOrUpdateAttr():void{
				var key:String = keyTi.text;
				if (key == null || key.length == 0) {
					Alert.show("Please specify key first.");
					return;
				}
				var value:String = valueTi.text;
				pm.selectedNode.attributes[key] = value;
				
				var attr:Object = null;
				for each(var pair:Object in pairs){
					if (pair.key == key){
						attr = pair;
						break;
					}
				}
				
				if (attr == null){
					attr = new Object();
					attr.key = key;
					attr.value = value;
					pairs.addItem(attr);
					logger.debug("create attribute(key=" + key + ", value=" + value + ")");
				} else {
					attr.value = value;					
					logger.debug("update attribute(key=" + key + ", value=" + value + ")");
				}				
				pairs.refresh();
				
				dg.selectedItem = attr;
				
				pm.selectedNode.dirty = true;
			}
			
			private function tryDeleteAttr():void{
				if (dg.selectedItem == null) {
					Alert.show("Please select an attribute first.");
					return;
				}
				
				Alert.show("Are you sure to delete this attribute?", "CONFIRMATION", Alert.YES|Alert.NO, this, deleteAttr);				
			}
			
			private function deleteAttr(event:CloseEvent):void{
				if (event.detail == Alert.NO) return;
				
				var attr:Object = dg.selectedItem; 
				pairs.removeItemAt(pairs.getItemIndex(attr));
				delete pm.selectedNode.attributes[attr.key];
				
				pm.selectedNode.dirty = true;
				logger.debug("delete attribute(key=" + attr.key + ", value=" + attr.value + ")");
			}
		]]>
	</fx:Script>
	
	<s:DataGrid id="dg" dataProvider="{pairs}" 
				 width="100%" height="100%"
				 selectionChange="selectAttr()">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn id="keyColumn" headerText="Key" dataField="key"/>
				<s:GridColumn id="valueColumn" headerText="Value" dataField="value"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Form>
		<s:FormItem id="keyItem" label="Key">
			<s:TextInput id="keyTi"/>
		</s:FormItem>
		<s:FormItem id="valueItem" label="Value">
			<s:TextInput id="valueTi"/>
		</s:FormItem>
		<s:FormItem id="actionItem" label="Action">
			<s:HGroup>
				<s:Button id="saveBtn" label="Create/Update" click="createOrUpdateAttr()"/>
				<s:Button id="deleteBtn" label="Delete" click="tryDeleteAttr()"/>
			</s:HGroup>
		</s:FormItem>				
	</s:Form>	
</s:VGroup>
